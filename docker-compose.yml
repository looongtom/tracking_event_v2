services:
  kafka-zookeeper:
    container_name: kafka-zookeeper
    image: "bitnami/zookeeper:3.8.4"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - custom_network

  kafka-broker:
    container_name: kafka-brooker
    image: "bitnami/kafka:3.3.2"
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=kafka-zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka-broker:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - kafka-zookeeper
    networks:
      - custom_network


  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - custom_network

  receive-event:
    build:
      context: ./receive-event
      dockerfile: Dockerfile
    container_name: receive-event
    ports:
      - "8081:8081"
    depends_on:
      - kafka-broker
    networks:
      - custom_network
    env_file:
      - .env

  upload-event:
    build:
      context: ./upload-event
      dockerfile: Dockerfile
    container_name: upload-event
    ports:
      - "8083:8083"
    depends_on:
      - kafka-broker
    networks:
      - custom_network
    env_file:
      - .env

  event-processor:
    build:
      context: ./event-processor
      dockerfile: Dockerfile
    container_name: event-processor
    ports:
      - "8082:8082"
    depends_on:
      - kafka-broker
      - mongo
      - upload-event
    networks:
      - custom_network
    env_file:
      - .env

  kafka-listener:
    build:
      context: ./kafka-listener
      dockerfile: Dockerfile
    container_name: kafka-listener
    depends_on:
      - kafka-broker
      - event-processor
    networks:
      - custom_network
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: '0.25'       # Limit kafka-listener to 0.25 CPU
          memory: 128M       # Limit kafka-listener to 128 MB
        reservations:
          cpus: '0.1'        # Reserve 0.1 CPU
          memory: 64M        # Reserve 64 MB

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - /mnt/d/kienletv/prometheus-grafana/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
#    sudo mount --make-rshared /
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - 'GF_SMTP_ENABLED=true'
      - 'GF_SMTP_HOST=smtp.gmail.com:587'
      - 'GF_SMTP_USER=user1@gmail.com'
      - 'GF_SMTP_PASSWORD=mysamplePassword'
      - 'GF_SMTP_FROM_ADDRESS=user1@gmail.com'
    #      - 'GF_SERVER_DOMAIN=grafana.my.domain'
    #      - 'GF_SERVER_ROOT_URL=grafana.my.domain'
    restart: unless-stopped
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/host:ro,rslave'
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    # ports:
    #   - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg

volumes:
  kafka-volume:
  zookeeper-volume:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  custom_network:
    driver: bridge

